// Generated by CoffeeScript 1.7.1
(function() {
  var Logger, Utils, socketCore, socketio;

  socketio = require('socket.io');

  Utils = require('./utils').Utils;

  Logger = require('./logger');

  socketCore = function(httpServer, _sessionStore, _sessionSecret, appApi, User) {
    var crudSocket, io, logger, loggerSocket;
    io = socketio.listen(httpServer);
    io.set('log level', 1);
    io.set('authorization', function(data, accept) {
      var access_token, ip;
      if (data && data.query && data.query.token) {
        access_token = data.query.token;
        ip = data.address.address;
        User.verifyToken(access_token, ip, function(error, result) {
          if (error || !result) {
            return accept("ERROR: " + error, false);
          } else {
            return accept(null, true);
          }
        });
      } else {
        accept("NO_TOKEN", false);
      }
    });
    crudSocket = io.of('/crud');
    loggerSocket = io.of('/logger');
    logger = Logger.inject();
    crudSocket.on('connection', function(socket) {

      /*
      Socket.io session handling
       */

      /*
      sessionID = socket.handshake.sessionID
      
      _sessionStore.get sessionID, (err, session) ->
        if err or not session
           *console.log "error in get session"
        else
          socket.handshake.session = session
           *console.log "On connection session : ",socket.handshake.session
       */

      /*
        CRUD Operations Notification to Socket Clients
       */
      appApi.on("crud", function(crud_notification) {
        socket.emit('crud', crud_notification);
      });
      setInterval(function() {
        return socket.emit('send:time', {
          time: (new Date()).toString()
        });
      }, 1000);
    });
    loggerSocket.on('connection', function(socket) {
      logger.setSocketIo(loggerSocket);
    });
  };

  exports.socketCore = socketCore;

}).call(this);

//# sourceMappingURL=socket.map
